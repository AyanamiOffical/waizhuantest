import{_ as s,o as O,s as x,w as B,a as E,i as j,S as _,b as G,f as M}from"./bootstrap-DXVvTFoS.js";import{V as F,O as P,x as v}from"../jse/index-index-BpfZjsfB.js";const n=()=>null;n.isSelectOption=!0;n.displayName="AAutoCompleteOption";const u=()=>null;u.isSelectOptGroup=!0;u.displayName="AAutoCompleteOptGroup";function V(e){var r,o;return((r=e==null?void 0:e.type)===null||r===void 0?void 0:r.isSelectOption)||((o=e==null?void 0:e.type)===null||o===void 0?void 0:o.isSelectOptGroup)}const $=()=>s(s({},O(x(),["loading","mode","optionLabelProp","labelInValue"])),{dataSource:Array,dropdownMenuStyle:{type:Object,default:void 0},dropdownMatchSelectWidth:{type:[Number,Boolean],default:!0},prefixCls:String,showSearch:{type:Boolean,default:void 0},transitionName:String,choiceTransitionName:{type:String,default:"zoom"},autofocus:{type:Boolean,default:void 0},backfill:{type:Boolean,default:void 0},filterOption:{type:[Boolean,Function],default:!1},defaultActiveFirstOption:{type:Boolean,default:!0},status:String}),z=n,R=u,m=F({compatConfig:{MODE:3},name:"AAutoComplete",inheritAttrs:!1,props:$(),slots:Object,setup(e,r){let{slots:o,attrs:S,expose:b}=r;B(!e.dropdownClassName);const c=P(),A=()=>{var t;const a=M((t=o.default)===null||t===void 0?void 0:t.call(o));return a.length?a[0]:void 0};b({focus:()=>{var t;(t=c.value)===null||t===void 0||t.focus()},blur:()=>{var t;(t=c.value)===null||t===void 0||t.blur()}});const{prefixCls:i}=E("select",e);return()=>{var t,a,d;const{size:C,dataSource:y,notFoundContent:N=(t=o.notFoundContent)===null||t===void 0?void 0:t.call(o)}=e;let p;const{class:g}=S,h={[g]:!!g,[`${i.value}-lg`]:C==="large",[`${i.value}-sm`]:C==="small",[`${i.value}-show-search`]:!0,[`${i.value}-auto-complete`]:!0};if(e.options===void 0){const f=((a=o.dataSource)===null||a===void 0?void 0:a.call(o))||((d=o.options)===null||d===void 0?void 0:d.call(o))||[];f.length&&V(f[0])?p=f:p=y?y.map(l=>{if(j(l))return l;switch(typeof l){case"string":return v(n,{key:l,value:l},{default:()=>[l]});case"object":return v(n,{key:l.value,value:l.value},{default:()=>[l.text]});default:throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`.")}}):[]}const w=O(s(s(s({},e),S),{mode:_.SECRET_COMBOBOX_MODE_DO_NOT_USE,getInputElement:A,notFoundContent:N,class:h,popupClassName:e.popupClassName||e.dropdownClassName,ref:c}),["dataSource","loading"]);return v(_,w,G({default:()=>[p]},O(o,["default","dataSource","options"])))}}}),L=s(m,{Option:n,OptGroup:u,install(e){return e.component(m.name,m),e.component(n.displayName,n),e.component(u.displayName,u),e}});export{R as AutoCompleteOptGroup,z as AutoCompleteOption,$ as autoCompleteProps,L as default};
